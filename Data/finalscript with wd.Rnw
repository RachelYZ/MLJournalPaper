\documentclass[master,tocprelim]{cornell}
\usepackage{booktabs}         % reqired for booktabs=T
\usepackage[backend= biber]{biblatex}
\usepackage[table]{xcolor}    % required for "striped"
\addbibresource{LR.bib}

\usepackage{graphicx,pstricks}
\usepackage{graphics}
\usepackage{moreverb}
\usepackage{subfigure}
\usepackage{epsfig}
\usepackage{hangcaption}
\usepackage{txfonts}
\usepackage{palatino}
\graphicspath{ {figures/} }
 \usepackage{booktabs}
 \usepackage{longtable}
 \usepackage{array}
 \usepackage{multirow}
 \usepackage{wrapfig}
 \usepackage{float}
 \usepackage{colortbl}
 \usepackage{pdflscape}
 \usepackage{tabu}
 \usepackage{threeparttable}
 \usepackage{threeparttablex}
 \usepackage[normalem]{ulem}
 \usepackage{makecell}
 \usepackage{xcolor}


\begin{document}

\chapter{sample}

He said it is cool\cite{tkh1998}.

<<loadpackages, echo=FALSE, message=FALSE, warning=FALSE>>=
library(kableExtra)
library(tidyverse)
library(neuralnet)
library(dplyr)
library(reshape2)
library(colorspace)
library(ggplot2)
library(texreg)
library(caret)
library(forecast)
options(digits = 3)
library(kknn)
library(e1071)
library(dummies)
library(rpart)
@

<<loaddata, echo=FALSE, message=FALSE, warning=FALSE>>=
arr <- read.csv("~/Documents/Research/Thesis writing/NewData/Arr.csv") %>% 
  data.frame()%>%
  select(Arrival.Date, Booking.Window, Quantity) %>%
  mutate_at(., vars(Arrival.Date),  funs(as.Date(., "%m/%d/%Y")))
dt = arr %>%
  group_by(Arrival.Date, Booking.Window) %>%
  mutate(Quan = sum(Quantity)) %>%
  dplyr::arrange(., Arrival.Date, Booking.Window) 
dt = dt[-(1:2),-3] #throw out the first two observations to avoid inconsistency
foo = function(x){
  require(dplyr)
  new = as.Date(x, '%y.%m.%d') %>%
     format(., '20%y-%m-%d') %>%
    as.Date()
  return (new)
}
dt$Arrival.Date = foo(dt$Arrival.Date)
wide = dcast(dt, Arrival.Date ~ Booking.Window, value.var='Quan') %>% 
  data.frame() %>%
  arrange(., Arrival.Date)

for (i in (ncol(wide)-1):2){
  wide[i] = wide[i] + wide[i+1] 
}
wide[,3] = as.factor(weekdays(wide$Arrival.Date))
colnames(wide) = c('Arrival.Date', 'ROH0', 'DOW', paste0('ROH', 1:(ncol(wide)-3)))

wide$DOW <- ordered(wide$DOW, levels=c("Sunday","Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

wide = wide %>%
  remove_rownames %>% column_to_rownames('Arrival.Date')

kable(wide[1:10, 1:10], 'latex', caption = 'Experiment 1: Data Overview',
        longtable = F, booktabs = T) %>%
  kable_styling(latex_options = c("striped", "hold_position", "scale_down" ,"repeat_header"))


ggplot(wide, aes(x=as.Date(unlist(rownames(wide))), y=ROH0)) +  
  geom_line() +
  theme_minimal()+
  xlab("Stay Date") + ylab('Final Arrivals') + 
  theme(plot.caption = element_text(hjust = 0))
@

<<e2.ran.cv, echo=FALSE, message=FALSE, warning=FALSE>>=
materr = function(data){ 
  require(dplyr)
  m = data 
  for (j in 2:ncol(data)){
    m[,j] = (data[,j] - data[,1]) #calculating errors for each forecast
  }
  ME = colMeans(m)
  MAE = colMeans(abs(m))
  SD = apply(m,2,sd)
  
  p = data
  for (i in 2:ncol(p)){
    p[, i] = m[,i] / data[,1]
  }
  MPE = colMeans(p)
  MAPE = colMeans(abs(p))

  return(rbind(ME,MAE,MPE,MAPE,SD))
} 

set.seed(2020) 
tr_ind = sample(nrow(wide), 0.8*nrow(wide))
agg = c(1,2,3,4,5,6,7,14,21,30,60,90)
ran.train = wide[tr_ind, c(1,2,agg+2)]
ran.test = wide[-tr_ind, c(1,2,agg+2)]
@

<<ran.apk, echo=FALSE, message=FALSE, warning=FALSE>>=  
ran.apk.wd = ran.train    
for (j in ncol(ran.apk.wd):3){
  ran.apk.wd[,j] = ran.apk.wd[,1] - ran.apk.wd[,j]
}

ran.apk.wd = ran.apk.wd %>%
  group_by(DOW) %>%
  summarise_at(.vars=names(.)[3:ncol(ran.apk.wd)], .funs='mean')

ran.apk.wd.pre = ran.test
ran.apk.wd.pre[, 3:ncol(ran.apk.wd.pre)] = NA

for (i in 1:(nrow(ran.apk.wd.pre))){
  m = match(ran.apk.wd.pre[i,2], ran.apk.wd$DOW)
  ran.apk.wd.pre[i,3:ncol(ran.apk.wd.pre)] = 
    ran.test[i,3:ncol(ran.apk.wd.pre)] + ran.apk.wd[m, 2:ncol(ran.apk.wd)]
}

ran.apk.wd.err = t(materr(ran.apk.wd.pre[,-2])) %>% data.frame() 
@

<<ran.mpk, echo=FALSE, message=FALSE, warning=FALSE>>=  
ran.mpk.wd = ran.train 
for (j in ncol(ran.mpk.wd):3){
  ran.mpk.wd[,j] =  ran.mpk.wd[,j]  / ran.mpk.wd[,1]
}
ran.mpk.wd = ran.mpk.wd %>%
  group_by(DOW) %>% 
 summarise_at(.vars=names(.)[3:(ncol(ran.train))], .funs='mean')

ran.mpk.wd.pre = ran.test
ran.mpk.wd.pre[, 3:ncol(ran.mpk.wd.pre)] = NA

for (i in 1:(nrow(ran.mpk.wd.pre))){
  m = match(ran.mpk.wd.pre[i,2], ran.mpk.wd$DOW)
  ran.mpk.wd.pre[i, 3:ncol(ran.mpk.wd.pre)] = 
    ran.test[i, 3:ncol(ran.mpk.wd.pre)]/
    ran.mpk.wd[m, 2:ncol(ran.mpk.wd)]} 
#NA because the dinominator=0

ran.mpk.wd.err = materr(ran.mpk.wd.pre[,-2]) %>% t() %>% 
  as.data.frame() 
@

<<ran.reg, echo=FALSE, message=FALSE, warning=FALSE>>= 
ran.reg.pred1 = ran.test
ran.reg.pred1[,3:ncol(ran.reg.pred1)] = NA
reg = vector(mode='list', length=90)
for (i in agg){ 
  these.predictor = paste0(c('DOW', paste0('ROH',agg[which(agg==i)])), collapse='+')
  lm.formula = paste('ROH0', these.predictor, sep = '~')
  reg[[i]] = lm(lm.formula, data = ran.train)
  ran.reg.pred1[, which(names(ran.reg.pred1)==paste0('ROH',i))]=predict(reg[[i]], ran.test)
}
ran.reg.err = materr(ran.reg.pred1[,-2]) %>% t() %>% 
  as.data.frame() 
@

<<ran.nn, echo=FALSE, message=FALSE, warning=FALSE>>=  
set.seed(2020)
nn.train.scaled=scale(ran.train[,-2]) #standardization
nn.test.scaled= scale(ran.test[,-2]) 
dow.tr = dummy(ran.train$DOW, sep='.')
dow.te = dummy(ran.test$DOW, sep='.')
nn.train.scaled = cbind(dow.tr, nn.train.scaled)
nn.test.scaled = cbind(dow.te, nn.test.scaled)
nn.pred = nn.test.scaled %>% data.frame()
nn.pred[, 9:ncol(nn.pred)] = NA

s1=Sys.time()
for (i in rev(agg)){
  colind = which(names(as.data.frame(nn.train.scaled))==paste0('ROH',i))
  this.train = nn.train.scaled[, c(1:8, colind:ncol(nn.train.scaled))]
  nn.model = neuralnet(ROH0~., this.train, linear.output=T, 
                       hidden=3, stepmax = 100000)
  this.test = nn.test.scaled[, c(1:8, colind:ncol(nn.test.scaled))] %>% as.data.frame()
  nn.pred[, colind] = predict(nn.model, this.test) 
}
time.nn = Sys.time() - s1
write_csv(nn.pred, 'nn.pre.unscaled_04292020.csv')
#nn.pred = read_csv('nn.pre.unscaled_04292020.csv')
nn.pred = nn.pred[, -(1:7)]
nn.pred.unscaled = nn.pred
nn.pred.unscaled[,] = NA
for (i in 1:nrow(nn.pred)){
  nn.pred.unscaled[i,] = nn.pred[i,]* (apply(ran.test[,-2], 2, sd)) + (colMeans(ran.test[,-2]))
}
ran.nn.err = materr(nn.pred.unscaled) %>% t() %>% 
  as.data.frame() 
@

<<ran.knn, echo=FALSE, message=FALSE, warning=FALSE>>=
set.seed(2020) 
k.train = cbind(dow.tr, ran.train[,-2])
k.test = cbind(dow.te, ran.test[,-2]) 
ran.knn.pre = ran.test[,-2]
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
opk= rep(NA, length(agg))
s1=Sys.time()
for (i in agg){
  colind = which(names(k.train)==paste0('ROH',i))
  this.train = k.train[, c(1:8, colind:ncol(k.train))]
  train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
  k = train(ROH0~., method='knn', tuneLength = 5, 
            trControl=train.control, preProcess=c('scale','center','pca'),
            data=this.train)
  opk[colind-8] = k$bestTune[[1]]
  this.test = k.test
  ran.knn.pre[,colind-7] = predict(k, this.test)
}
time.knn = Sys.time() - s1
ran.knn.err = materr(ran.knn.pre) %>% t() %>% 
  as.data.frame() 
@

<<wknn, echo=FALSE, message=FALSE, warning=FALSE>>= 
set.seed(2020) 
ran.wknn.pre = ran.test[,-2]
ran.wknn.pre[, 2:ncol(ran.wknn.pre)] = NA 
opk2 = rep(NA, ncol(ran.test)) 
s1=Sys.time()
for (i in agg){
  # 2s per loop
  colind = which(names(k.train)==paste0('ROH',i))
  this.train = k.train[, c(1:8, colind:ncol(k.train))]
  train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) 
  wk = train.kknn(ROH0~., data = this.train, kmax = 20, 
                  kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
  opk2[colind-8] = wk$best.parameters[[2]]
#  kknn <- kknn(ROH0~., k=opk2[i-1], scale = ROH0, distance=2, 
#               train = this.train, test = this.test,
#               kernel = paste0(toString(wk$best.parameters[[1]])))
  ran.wknn.pre[, colind-7] = predict(wk, k.test)
}
time.wknn = Sys.time() - s1
ran.wknn.err = materr(ran.wknn.pre)%>% t() %>% 
  as.data.frame() 
@

<<ran.dtree, echo=FALSE, message=FALSE, warning=FALSE>>= 
set.seed(2020) 
ran.dtree.pred = ran.test
ran.dtree.pred[,3:ncol(ran.dtree.pred)] = NA
s1=Sys.time()

for (i in agg){ 
  colind=which(names(ran.train)==paste0('ROH',i))
  this.train = ran.train[, c(1, 2, colind:ncol(ran.train))]
  tree.model = rpart(ROH0~., data=this.train, method='anova')
  ran.dtree.pred[, colind] = predict(tree.model, ran.test)
}
time.dtree = Sys.time() - s1
ran.dtree.err = materr(ran.dtree.pred[,-2]) %>% t() %>% 
  as.data.frame() 
@
<<ran.rtree, echo=FALSE, message=FALSE, warning=FALSE>>= 
set.seed(2020)  
ran.rf.pred = ran.test
ran.rf.pred[,3:ncol(ran.test)] = NA
rf.mtry = rep(NA, length(agg))
s1 = Sys.time()
for (i in agg){ 
  colind=which(names(ran.train)==paste0('ROH',i))
  this.train = ran.train[,c(1,2,colind:ncol(ran.train))]
  train.control = trainControl(method='repeatedcv', number=10)
 # rtt = randomForest(ROH0~., data = this.train)
  r.tree = train(ROH0~., data = this.train, method='rf',  
                 trControl=train.control, tuneLength = 12)
                 #,tunegrid=expand.grid(.mtry=sqrt(ncol(this.train)))) 
  rf.mtry[colind-2] = r.tree$bestTune[[1]]
  #print(r.tree)
  ran.rf.pred[, colind] = predict(r.tree, ran.test, type = 'raw')
}
time.rff = Sys.time() - s1
#importance(rtt)
#varImpPlot(r.tree)
#varImp(r.tree)
write_csv(ran.rf.pred, 'rf_wd_pred_new_0512.csv')
ran.rf.err = materr(ran.rf.pred[,-2])%>% t() %>% 
  as.data.frame() 
@

<<ran.svm, echo=FALSE, message=FALSE, warning=FALSE>>= 
set.seed(2020) 
ran.svm.pred = ran.test   
ran.svm.pred[, 3:ncol(ran.svm.pred)] = NA
totot = rep(0, 90)
for (i in agg){
  colind = which(names(k.train)==paste0('ROH',i))
  this.train = k.train[, c(1:8, colind:ncol(k.train))]
  svm.model = svm(ROH0~., this.train)
  totot[i]=svm.model$tot.nSV
  ran.svm.pred[, colind-6] = predict(svm.model, k.test)
}

ran.svm.err = materr(ran.svm.pred[,-2]) %>% t() %>% 
  as.data.frame()
@

<<ran.results.plot, echo=FALSE, message=FALSE, warning=FALSE>>=
e2_SDE_ALL = cbind(apk = ran.apk.wd.err[-1,5], mpk=ran.mpk.wd.err[-1,5],
              reg = ran.reg.err[-1,5],  nn = ran.nn.err[-1,5],knn = ran.knn.err[-1,5], 
              wknn = ran.wknn.err[-1,5], dtree = ran.dtree.err[-1,5],  
              rf = ran.rf.err[-1,5], svm = ran.svm.err[-1,5] ) %>%
  as.data.frame() 
rownames(e2_SDE_ALL)=rownames(ran.apk.wd.err)[-1]
e2SDEmelt = melt(as.matrix(e2_SDE_ALL), varnames=c('DBA', 'Model'))
e2SDEmelt$DBA = factor(e2SDEmelt$DBA, 
              levels = c('ROB1','ROB2','ROB3','ROB4','ROB5','ROB6','ROB7','ROB14',
                         'ROB21','ROB30','ROB60','ROB90'))
e2SDEmelt$Model = factor(e2SDEmelt$Model, levels=c('apk','mpk','reg','nn','knn','wknn', 'dtree', 'rf','svm'))
ggplot(e2SDEmelt, 
       aes(x=DBA, y=value, group=Model)) +
  geom_line(aes(color=Model,linetype=Model), size=0.5)+
  geom_point(aes(color=Model, shape=Model), size=1.8)+
  scale_linetype_manual('', values=c('solid', 'solid', 'dotted',
                                     'dotted', 'dotted', 'dotted',
                                     'solid', 'solid', 'solid'))+
  scale_shape_manual('', values=c(0,1,5,4,0,1,2,5,4)) + 
  scale_color_manual('', values = c('#999999', '#999999', #pickup- red
                                '#000000', '#000000', #reg+nn: blue
                                '#999999', '#999999', #KNN: yellow
                                '#000000','#000000', #Tree: green
                                '#000000')) + #SVM: 
  xlab('DBA') + ylab('Standard Deviation of Errors') +
  theme_minimal()+
  theme(axis.text.x = element_text(angle=45, vjust=0.5))


e2_SDE_ALL[13,] = colMeans(e2_SDE_ALL)
kable(e2_SDE_ALL[13,], 'latex', caption = 'Experiment2: Data Overview',
      booktabs = T) %>%
  kable_styling(latex_options = c("striped", "repeat_header"))
#write.csv(cbind(MEALL, MAEALL, MPEALL, MAPEALL, SD), "ran_e1_bycutoff.csv")

@

<<e2.me, echo=FALSE, message=FALSE, warning=FALSE>>=
e2_ME_ALL = cbind(apk = ran.apk.wd.err[-1,1], mpk=ran.mpk.wd.err[-1,1],
              reg = ran.reg.err[-1,1], nn = ran.nn.err[-1,1], knn = ran.knn.err[-1,1], 
              wknn = ran.wknn.err[-1,1], dtree = ran.dtree.err[-1,1],  
              rf = ran.rf.err[-1,1], svm = ran.svm.err[-1,1]) %>%
  as.data.frame() 
rownames(e2_ME_ALL)=rownames(ran.apk.wd.err)[-1]
e2MEmelt = melt(as.matrix(e2_ME_ALL), varnames=c('DBA', 'Model'))
e2MEmelt$DBA = factor(e2MEmelt$DBA, 
              levels = c('ROB1','ROB2','ROB3','ROB4','ROB5','ROB6','ROB7','ROB14',
                         'ROB21','ROB30','ROB60','ROB90'))
e2MEmelt$Model = factor(e2MEmelt$Model, levels=c('apk','mpk','reg','nn','knn','wknn', 'dtree', 'rf','svm'))
ggplot(e2MEmelt, 
       aes(x=DBA, y=value, group=Model, color=Model)) +
  geom_line(aes(color=Model,linetype=Model), size=0.5)+
  geom_point(aes(color=Model, shape=Model), size=1.8)+
  scale_linetype_manual('', values=c('solid', 'solid', 'dotted',
                                     'dotted', 'dotted', 'dotted',
                                     'solid', 'solid', 'solid'))+
  scale_shape_manual('', values=c(0,1,5,4,0,1,2,5,4)) + 
  scale_color_manual('', values = c('#999999', '#999999', #pickup- red
                                '#000000', '#000000', #reg+nn: blue
                                '#999999', '#999999', #KNN: yellow
                                '#000000','#000000', #Tree: green
                                '#000000')) + #SVM: 
  xlab('DBA') + ylab('Mean Errors') +
  theme_minimal()+
  theme(axis.text.x = element_text(angle=45, vjust=0.5))
e2_ME_ALL[13,] = colMeans(e2_ME_ALL)
kable(e2_ME_ALL[13,], 'latex', caption = 'Experiment2: Data Overview',
      booktabs = T) %>%
  kable_styling(latex_options = c("striped", "repeat_header"))


e2_MAE_ALL = cbind(apk = ran.apk.wd.err[-1,2], mpk=ran.mpk.wd.err[-1,2],
              reg = ran.reg.err[-1,2],  nn = ran.nn.err[-1,2], knn = ran.knn.err[-1,2], 
              wknn = ran.wknn.err[-1,2], dtree = ran.dtree.err[-1,2],  
              rf = ran.rf.err[-1,2], svm = ran.svm.err[-1,2]) %>%
  as.data.frame() 
rownames(e2_MAE_ALL)=rownames(ran.apk.wd.err)[-1]
e2MAEmelt = melt(as.matrix(e2_MAE_ALL), varnames=c('DBA', 'Model'))
e2MAEmelt$DBA = factor(e2MAEmelt$DBA, 
              levels = c('ROB1','ROB2','ROB3','ROB4','ROB5','ROB6','ROB7','ROB14',
                         'ROB21','ROB30','ROB60','ROB90'))
e2MAEmelt$Model = factor(e2MAEmelt$Model, levels=c('apk','mpk','reg','nn','knn','wknn', 'dtree', 'rf','svm'))
ggplot(e2MAEmelt, 
       aes(x=DBA, y=value, group=Model, color=Model)) +
  geom_line(aes(color=Model, shape=Model), size=1)+
  geom_point(aes(color=Model,shape=Model),  size=2)+
#  scale_fill_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(12)) +
#  scale_color_brewer(palette="Paired") +
  scale_linetype_manual('', values=c('solid', 'solid', 'dotted',
                                     'dotted', 'dotted', 'dotted',
                                     'solid', 'solid', 'solid'))+
  scale_shape_manual('', values=c(0,1,5,4,0,1,2,5,4)) + 
  scale_color_manual('', values = c('#999999', '#999999', #pickup- red
                                '#000000', '#888888', #reg+nn: blue
                                '#999999', '#999999', #KNN: yellow
                               '#000000','#000000', #Tree: green
                                '#ffbf00')) + #SVM: 
  xlab('DBA') + ylab('Mean Absolute Errors') +
  theme_minimal()+
  theme(axis.text.x = element_text(angle=45, vjust=0.5))
e2_MAE_ALL[13,] = colMeans(e2_MAE_ALL)
kable(e2_MAE_ALL[13,], 'latex', caption = 'Experiment2: Data Overview',
      booktabs = T) %>%
  kable_styling(latex_options = c("striped", "repeat_header"))
@

