nearZeroVar(ran.train)
ran.knn.pre = ran.test
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
agg
i=60
which(names(ran.train)==paste0('ROH',i))
ran.test[,12]
colnames(ran.test)[12]
?trainControl
this.train
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = k.train[, c(1, colind:ncol(k.train))]
this.train = ran.train[, c(1, colind:ncol(ran.train))]
this.train
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
k
k$bestTune[[1]]
colind
opk[, colind] = k$bestTune[[1]]
opk= ran.test[1,]
opk[, colind] = k$bestTune[[1]]
ran.knn.pre
ran.knn.pre[,colind] = predict(k, this.test)
ran.knn.pre
set.seed(0)
train.true = ran.train[,1]
ran.knn.pre = ran.test
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
opk= ran.test[1,]
for (i in agg){
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = k.test
ran.knn.pre[,colind] = predict(k, this.test)
}
#ran.knn.pre = ran.knn.pre[, 1:13]
#write_csv(ran.knn.pre, 'ran.knn.pre.csv')
#ran.knn.pre <- read.csv("~/ran.knn.pre.csv")
ran.knn.err = materr(ran.knn.pre) %>% t() %>%
as.data.frame()
<<ran.knn, echo=FALSE, message=FALSE, warning=FALSE>>=
set.seed(0)
train.true = ran.train[,1]
ran.knn.pre = ran.test
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
opk= ran.test[1,]
for (i in agg){
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = ran.test
ran.knn.pre[,colind] = predict(k, this.test)
}
s1 = system.time()
s1 = Sys.time()
s1
<<ran.knn, echo=FALSE, message=FALSE, warning=FALSE>>=
set.seed(0)
train.true = ran.train[,1]
ran.knn.pre = ran.test
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
opk= ran.test[1,]
s1 = Sys.time()
for (i in agg){
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = ran.test
ran.knn.pre[,colind] = predict(k, this.test)
print(Sys.time()-s1)
}
#ran.knn.pre = ran.knn.pre[, 1:13]
#write_csv(ran.knn.pre, 'ran.knn.pre.csv')
#ran.knn.pre <- read.csv("~/ran.knn.pre.csv")
ran.knn.err = materr(ran.knn.pre) %>% t() %>%
as.data.frame()
@
set.seed(0)
train.true = ran.train[,1]
ran.knn.pre = ran.test
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
opk= ran.test[1,]
s1 = Sys.time()
for (i in agg){
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
k = train(ROH0~., method='knn', tuneLength = 10,
trControl=train.control, preProcess=c('scale','center'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = ran.test
ran.knn.pre[,colind] = predict(k, this.test)
print(Sys.time()-s1)
}
#ran.knn.pre = ran.knn.pre[, 1:13]
#write_csv(ran.knn.pre, 'ran.knn.pre.csv')
#ran.knn.pre <- read.csv("~/ran.knn.pre.csv")
ran.knn.err = materr(ran.knn.pre) %>% t() %>%
as.data.frame()
opk
ran.knn.err = materr(ran.knn.pre) %>% t() %>%
as.data.frame()
ran.knn.err
set.seed(0)
ran.wknn.pre = ran.test
ran.wknn.pre[, 2:ncol(ran.wknn.pre)] = NA
opk2 = rep(NA, ncol(test))
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 20,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[i-1] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
ran.wknn.pre = ran.wknn.pre[,1:13]
ran.wknn.err = materr(ran.wknn.pre)%>% t() %>%
as.data.frame()
ran.wknn.pre = ran.test
ran.wknn.pre[, 2:ncol(ran.wknn.pre)] = NA
opk2 = rep(NA, ncol(test))
opk2 = rep(NA, ncol(ran.test))
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 20,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[i-1] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
ran.wknn.pre
ran.wknn.err = materr(ran.wknn.pre)%>% t() %>%
as.data.frame()
ran.wknn.err
wk
opk2
opk2 = rep(NA, ncol(ran.test))
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 10,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk[, colind] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
for (i in agg){
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
k = train(ROH0~., method='knn', tuneLength = 10,
trControl=train.control, preProcess=c('scale','center'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = ran.test
ran.knn.pre[,colind] = predict(k, this.test)
print(Sys.time()-s1)
}
set.seed(0)
ran.wknn.pre = ran.test
ran.wknn.pre[, 2:ncol(ran.wknn.pre)] = NA
opk2 = rep(NA, ncol(ran.test))
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 10,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[, colind] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
i=60
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 10,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[, colind] = wk$best.parameters[[2]]
wk$best.parameters[[2]]
opk2
opk2[colind] = wk$best.parameters[[2]]
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 10,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[colind] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
ran.wknn.err = materr(ran.wknn.pre)%>% t() %>%
as.data.frame()
opk2
i=1
colind=which(names(ran.train)==paste0('ROH',i))
colind
set.seed(0)
ran.wknn.pre = ran.test
ran.wknn.pre[, 2:ncol(ran.wknn.pre)] = NA
opk2 = opk= ran.test[1,]
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 10,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[colind] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
opk2
opk2 = ran.test[1,]
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1,colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
wk = train.kknn(ROH0~., data = this.train, kmax = 10,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[colind] = wk$best.parameters[[2]]
this.test = ran.test
ran.wknn.pre[, colind] = predict(wk, this.test)
}
opk2
opk
set.seed(0)
train.true = ran.train[,1]
ran.knn.pre = ran.test
ran.knn.pre[,2:ncol(ran.knn.pre)]=NA
opk= ran.test[1,]
s1 = Sys.time()
for (i in agg){
#each loop takes 1min
colind = which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
train.control = trainControl(method='repeatedcv', number=10)
k = train(ROH0~., method='knn', tuneLength = 10,
trControl=train.control, preProcess=c('scale','center'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = ran.test
ran.knn.pre[,colind] = predict(k, this.test)
print(Sys.time()-s1)
}
opk
ran.dtree.pred = ran.test
ran.dtree.pred
ran.dtree.pred[,2:ncol(ran.dtree.pred)] = NA
i=6-
i=60
colind=which(names(ran.train)==paste0('ROH',i))
colind
this.train = ran.train[, c(1, colind:ncol(ran.train))]
tree.model = rpart(ROH0~., data=this.train, method='anova')
library(tree)
library(rpart)
tree.model = rpart(ROH0~., data=this.train, method='anova')
this.test = ran.test
ran.dtree.pred[, colind] = predict(tree.model, this.test)
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
tree.model = rpart(ROH0~., data=this.train, method='anova')
this.test = ran.test
ran.dtree.pred[, colind] = predict(tree.model, this.test)
}
ran.dtree.pred
ran.dtree.err = materr(ran.dtree.pred[,-2]) %>% t() %>%
as.data.frame()
set.seed(0)
ran.rf.pred = ran.test
ran.rf.pred[, 2:ncol(ran.test)] = NA
ran.rf.pred
i
i=6-
i=60
this.train = ran.train[,c(1, colind:ncol(ran.train))]
this.test = ran.test
train.control=trainControl(method='repeatedcv', number=10, search='random')
#  rtt = randomForest(ROH0~., data = this.train)
r.tree = train(ROH0~., data = this.train, method='rf',
trControl=train.control, tuneLength = 10)
ran.rf.pred
#print(r.tree)
ran.rf.pred[, colind] = predict(r.tree, this.test, type = 'raw')
set.seed(0)
ran.rf.pred = ran.test
ran.rf.pred[, 2:ncol(ran.test)] = NA
s1 = Sys.time()
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[,c(1, colind:ncol(ran.train))]
this.test = ran.test
train.control=trainControl(method='repeatedcv', number=10, search='random')
#  rtt = randomForest(ROH0~., data = this.train)
r.tree = train(ROH0~., data = this.train, method='rf',
trControl=train.control, tuneLength = 10)
print(Sys.time()-s1)
#print(r.tree)
ran.rf.pred[, colind] = predict(r.tree, this.test, type = 'raw')
}
ran.dtree.err
ran.dtree.pred
ran.svm.pred = ran.test
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
i=60
colind=which(names(ran.train)==paste0('ROH',i))
colind
this.train = ran.train[, c(1, colind:ncol(this.train))]
this.train
ncol(this.train)
this.train = ran.train[, c(1, colind:ncol(ran.train))]
this.train
svm.model = svm(ROH0~., this.train)
library(svm)
??svm
library(e1071)
svm.model = svm(ROH0~., this.train)
totot
totot = rep(0, 90)
svm.model
svm.model$tot.nSV
length(agg)
support_vector_number = rep(NA, length(agg))
support_vector_number = rep(NA, length(agg)+1)
support_vector_number[colind]=svm.model$tot.nSV
support_vector_number
this.test = ran.test
ran.svm.pred[, colind] = predict(svm.model, this.test)
ran.svm.pred
set.seed(0)
ran.svm.pred = ran.test
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
support_vector_number = rep(NA, length(agg)+1)
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train)
support_vector_number[colind]=svm.model$tot.nSV
ran.svm.pred[, colind] = predict(svm.model, ran.test)
}
ran.svm.pred
ran.svm.err = materr(ran.svm.pred[,-2]) %>% t() %>%
as.data.frame()
ran.svm.err
support_vector_number
?svm
ran.svm.err1 = materr(ran.svm.pred[,-2]) %>% t() %>%
as.data.frame()
ran.svm.pred
i
i=60
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train, kernal = 'polynomial')
support_vector_number[colind]=svm.model$tot.nSV
support_vector_number
support_vector_number = rep(NA, length(agg)+1)
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train, kernal = 'polynomial')
support_vector_number[colind]=svm.model$tot.nSV
support_vector_number
set.seed(0)
ran.svm.pred = ran.test
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
support_vector_number = rep(NA, length(agg)+1)
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train, kernal = 'polynomial')
support_vector_number[colind]=svm.model$tot.nSV
ran.svm.pred[, colind] = predict(svm.model, ran.test)
}
ran.svm.err.polynomial = materr(ran.svm.pred) %>% t() %>% as.data.frame()
ran.svm.err.polynomial
ran.svm.err
set.seed(0)
ran.svm.pred = ran.test
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
support_vector_number = rep(NA, length(agg)+1)
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train, kernal = 'radial')
support_vector_number[colind]=svm.model$tot.nSV
ran.svm.pred[, colind] = predict(svm.model, ran.test)
}
support_vector_number
ran.svm.err.radial = materr(ran.svm.pred) %>% t() %>% as.data.frame()
ran.svm.err.radial
set.seed(0)
ran.svm.pred = ran.test
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
support_vector_number = rep(NA, length(agg)+1)
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train, kernal = 'radial')
support_vector_number[colind]=svm.model$tot.nSV
ran.svm.pred[, colind] = predict(svm.model, ran.test)
}
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
svm.model = svm(ROH0~., this.train, kernal = 'sigmoid')
support_vector_number[colind]=svm.model$tot.nSV
ran.svm.pred[, colind] = predict(svm.model, ran.test)
}
ran.svm.err.sigmoid = materr(ran.svm.pred) %>% t() %>% as.data.frame() #no diff
ran.svm.err.sigmoid
i=5
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
optmodelsvm = tune(svm, ROH0~., data = this.train,
ranges=list(elsilon=seq(0,1,0.1), cost=1:100))
optmodelsvm = tune(svm, ROH0~., data = this.train,
ranges=list(elsilon=seq(0,1,0.1), cost=1:10))
optmodelsvm
svm.mode = optmodelsvm$best.model
ran.svm.pred[, colind] = predict(svm.model, ran.test)
ran.svm.pred
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
ran.svm.pred[, colind] = predict(svm.model, ran.test)
ran.svm.pred
optmodelsvm$best.parameters
svm.model = optmodelsvm$best.model
ran.svm.pred[, colind] = predict(svm.model, ran.test)
ran.svm.pred
i=4
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
optmodelsvm = tune(svm, ROH0~., data = this.train,
ranges=list(elsilon=seq(0,1,0.1), cost=1:5))
#  svm.model = svm(ROH0~., data = this.train)
#  support_vector_number[colind]=svm.model$tot.nSV
svm.model = optmodelsvm$best.model
ran.svm.pred[, colind] = predict(svm.model, ran.test)
ran.svm.pred
ran.svm.err
ran.svm.pred = ran.test
ran.svm.pred[,2:ncol(ran.svm.pred)] = NA
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
optmodelsvm = tune(svm, ROH0~., data = this.train,
ranges=list(elsilon=seq(0,1,0.1), cost=1:5))
#  svm.model = svm(ROH0~., data = this.train)
#  support_vector_number[colind]=svm.model$tot.nSV
svm.model = optmodelsvm$best.model
ran.svm.pred[, colind] = predict(svm.model, ran.test)
}
s1=Sys.time()
for (i in agg){
colind=which(names(ran.train)==paste0('ROH',i))
this.train = ran.train[, c(1, colind:ncol(ran.train))]
optmodelsvm = tune(svm, ROH0~., data = this.train,
ranges=list(elsilon=seq(0,1,0.1), cost=1:5))
#  svm.model = svm(ROH0~., data = this.train)
#  support_vector_number[colind]=svm.model$tot.nSV
svm.model = optmodelsvm$best.model
ran.svm.pred[, colind] = predict(svm.model, ran.test)
print(Sys.time()-s1)
}
#ran.svm.err
ran.svm.err.tuned = materr(ran.svm.pred) %>% t() %>% as.data.frame()
cbind(ran.svm.err, ran.svm.err.tuned)
ran.svm.err.tuned
ran.svm.err
ran.apk.err
ran.reg.err
ran.nn.err
ran.nn.pred.unscaled
ran.nn.err = materr(ran.nn.pred.unscaled) %>% t() %>%
as.data.frame()
ran.nn.err
e2_SDE_ALL = cbind(apk = ran.apk.err[-1,5], mpk=ran.mpk.err[-1,5],
reg = ran.reg.err[-1,5],  nn = ran.nn.err[-1,5],knn = ran.knn.err[-1,5],
wknn = ran.wknn.err[-1,5], dtree = ran.dtree.err[-1,5],
rf = ran.rf.err[-1,5], svm = ran.svm.err[-1,5] ) %>%
as.data.frame()
