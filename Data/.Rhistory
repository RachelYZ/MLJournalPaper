p = data
for (i in 2:ncol(p)){
p[, i] = m[,i] / data[,1]
}
MPE = colMeans(p)
MAPE = colMeans(abs(p))
return(rbind(ME,MAE,MPE,MAPE,SD))
}
set.seed(0)
tr_ind = sample(nrow(wide), 0.8*nrow(wide))
train = wide[tr_ind, ]
test = wide[-tr_ind, ]
# Chunk 4: apk
apk.wd = train
for (j in ncol(apk.wd):3){
apk.wd[,j] = apk.wd[,1] - apk.wd[,j]
}
apk.wd = apk.wd %>%
group_by(DOW) %>%
summarise_at(.vars=names(.)[3:ncol(apk.wd)], .funs='mean')
apk.wd.pre = test
apk.wd.pre[, 3:ncol(apk.wd.pre)] = NA
for (i in 1:(nrow(apk.wd.pre))){
m = match(apk.wd.pre[i,2], apk.wd$DOW)
apk.wd.pre[i,3:ncol(apk.wd.pre)] =
test[i,3:ncol(apk.wd.pre)] + apk.wd[m, 2:ncol(apk.wd)]
}
apk.wd.err = t(materr(apk.wd.pre[,-2])) %>% data.frame()
# Chunk 5: mpk
mpk.wd = train
for (j in ncol(mpk.wd):3){
mpk.wd[,j] =  mpk.wd[,j]  / mpk.wd[,1]
}
mpk.wd = mpk.wd %>%
group_by(DOW) %>%
summarise_at(.vars=names(.)[3:(ncol(train))], .funs='mean')
mpk.wd.pre = test
mpk.wd.pre[, 3:ncol(mpk.wd.pre)] = NA
for (i in 1:(nrow(mpk.wd.pre))){
m = match(mpk.wd.pre[i,2], mpk.wd$DOW)
mpk.wd.pre[i, 3:ncol(mpk.wd.pre)] =
test[i, 3:ncol(mpk.wd.pre)]/
mpk.wd[m, 2:ncol(mpk.wd)]}
#NA because the dinominator=0
mpk.wd.err = materr(mpk.wd.pre[,-2]) %>% t() %>%
as.data.frame()
# Chunk 6: reg
reg.pred = test
reg.pred[,3:ncol(reg.pred)] = NA
reg = vector(mode='list')
s1 = Sys.time()
for (i in agg){
this.predictor = paste0(paste0('ROH',agg[which(agg==i)]), collapse='+')
lm.formula = paste('ROH0', paste0('DOW+', this.predictor), sep = '~')
reg[[this.predictor]] = lm(lm.formula, data = train)
reg.pred[, which(names(reg.pred)==paste0('ROH',i))]=predict(reg[[this.predictor]], test)
}
time.reg = Sys.time() - s1
reg.err = t(materr(reg.pred[,-2])) %>% data.frame()
# Chunk 8: nn.results
nn.err = read_csv('nn.err.csv')
# Chunk 9: knn
#12:08 ready to run - 1:19 start to run - FINISHED!
set.seed(0)
train.true = train[,1]
dow.tr = dummy(train$DOW, sep='.')
dow.te = dummy(test$DOW, sep='.')
k.train = cbind(train[, -c(2, nearZeroVar(train))], dow.tr)
k.test = cbind(test, dow.te)[,-2]
knn.pre = k.test
knn.pre[,2:ncol(knn.pre)]=NA
opk= test[1,]
for (i in agg){
#each loop takes 1min
colind = which(names(k.train)==paste0('ROH',i))
this.train = k.train[, c(1, colind:ncol(k.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = k.test
knn.pre[,colind] = predict(k, this.test)
}
<<loadpackages, echo=FALSE, message=FALSE, warning=FALSE>>=
library(kableExtra)
library(tidyverse)
library(neuralnet)
library(dplyr)
library(reshape2)
library(colorspace)
library(ggplot2)
library(texreg)
library(caret)
library(forecast)
options(digits = 3)
library(kknn)
library(e1071)
library(dummies)
library(rpart)
@
\section*{Single hotel}
<<loaddata, echo=FALSE, message=FALSE, warning=FALSE>>=
arr <- read.csv("~/Documents/Research/Thesis writing/NewData/Arr.csv") %>%
data.frame()%>%
select(Arrival.Date, Booking.Window, Quantity) %>%
mutate_at(., vars(Arrival.Date),  funs(as.Date(., "%m/%d/%Y")))
dt = arr %>%
group_by(Arrival.Date, Booking.Window) %>%
mutate(Quan = sum(Quantity)) %>%
dplyr::arrange(., Arrival.Date, Booking.Window)
dt = dt[-(1:2),-3] #throw out the first two observations to avoid inconsistency
foo = function(x){
require(dplyr)
new = as.Date(x, '%y.%m.%d') %>%
format(., '20%y-%m-%d') %>%
as.Date()
return (new)
}
dt$Arrival.Date = foo(dt$Arrival.Date)
agg = c(1, 2, 3, 4, 5, 6, 7, 14, 21, 30, 60, 90)
wide = dcast(dt, Arrival.Date ~ Booking.Window, value.var='Quan') %>%
data.frame() %>%
arrange(., Arrival.Date)
wide = wide %>%
mutate(DOW = weekdays(Arrival.Date)) %>%
remove_rownames %>% column_to_rownames('Arrival.Date') %>%
select(X0, DOW, paste0("X",agg))
colnames(wide) = c('ROH0', 'DOW', paste0('ROH',agg))
wide$DOW <- ordered(wide$DOW, levels=c("Sunday","Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
kable(wide[1:10, 1:10], 'latex', caption = 'Experiment 1: Data Overview',
longtable = F, booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position", "scale_down" ,"repeat_header"))
ggplot(wide, aes(x=as.Date(unlist(rownames(wide))), y=ROH0)) +
geom_line() +
theme_minimal()+
xlab("Stay Date") + ylab('Final Arrivals') +
theme(plot.caption = element_text(hjust = 0))
@
<<e2.cv, echo=FALSE, message=FALSE, warning=FALSE>>=
materr = function(data){
require(dplyr)
m = data
for (j in 2:ncol(data)){
m[,j] = (data[,j] - data[,1]) #calculating errors for each forecast
}
ME = colMeans(m)
MAE = colMeans(abs(m))
SD = apply(m,2,sd)
p = data
for (i in 2:ncol(p)){
p[, i] = m[,i] / data[,1]
}
MPE = colMeans(p)
MAPE = colMeans(abs(p))
return(rbind(ME,MAE,MPE,MAPE,SD))
}
set.seed(0)
tr_ind = sample(nrow(wide), 0.8*nrow(wide))
train = wide[tr_ind, ]
test = wide[-tr_ind, ]
@
<<apk, echo=FALSE, message=FALSE, warning=FALSE>>=
apk.wd = train
for (j in ncol(apk.wd):3){
apk.wd[,j] = apk.wd[,1] - apk.wd[,j]
}
apk.wd = apk.wd %>%
group_by(DOW) %>%
summarise_at(.vars=names(.)[3:ncol(apk.wd)], .funs='mean')
apk.wd.pre = test
apk.wd.pre[, 3:ncol(apk.wd.pre)] = NA
for (i in 1:(nrow(apk.wd.pre))){
m = match(apk.wd.pre[i,2], apk.wd$DOW)
apk.wd.pre[i,3:ncol(apk.wd.pre)] =
test[i,3:ncol(apk.wd.pre)] + apk.wd[m, 2:ncol(apk.wd)]
}
apk.wd.err = t(materr(apk.wd.pre[,-2])) %>% data.frame()
@
<<mpk, echo=FALSE, message=FALSE, warning=FALSE>>=
mpk.wd = train
for (j in ncol(mpk.wd):3){
mpk.wd[,j] =  mpk.wd[,j]  / mpk.wd[,1]
}
mpk.wd = mpk.wd %>%
group_by(DOW) %>%
summarise_at(.vars=names(.)[3:(ncol(train))], .funs='mean')
mpk.wd.pre = test
mpk.wd.pre[, 3:ncol(mpk.wd.pre)] = NA
for (i in 1:(nrow(mpk.wd.pre))){
m = match(mpk.wd.pre[i,2], mpk.wd$DOW)
mpk.wd.pre[i, 3:ncol(mpk.wd.pre)] =
test[i, 3:ncol(mpk.wd.pre)]/
mpk.wd[m, 2:ncol(mpk.wd)]}
#NA because the dinominator=0
mpk.wd.err = materr(mpk.wd.pre[,-2]) %>% t() %>%
as.data.frame()
@
<<reg, echo=FALSE, message=FALSE, warning=FALSE>>=
reg.pred = test
reg.pred[,3:ncol(reg.pred)] = NA
reg = vector(mode='list')
s1 = Sys.time()
for (i in agg){
this.predictor = paste0(paste0('ROH',agg[which(agg==i)]), collapse='+')
lm.formula = paste('ROH0', paste0('DOW+', this.predictor), sep = '~')
reg[[this.predictor]] = lm(lm.formula, data = train)
reg.pred[, which(names(reg.pred)==paste0('ROH',i))]=predict(reg[[this.predictor]], test)
}
time.reg = Sys.time() - s1
reg.err = t(materr(reg.pred[,-2])) %>% data.frame()
@
nn.err = read_csv('nn.err.csv')
<<knn, echo=FALSE, message=FALSE, warning=FALSE>>=
#12:08 ready to run - 1:19 start to run - FINISHED!
set.seed(0)
train.true = train[,1]
dow.tr = dummy(train$DOW, sep='.')
dow.te = dummy(test$DOW, sep='.')
k.train = cbind(train[, -c(2, nearZeroVar(train))], dow.tr)
k.test = cbind(test, dow.te)[,-2]
knn.pre = k.test
knn.pre[,2:ncol(knn.pre)]=NA
opk= test[1,]
for (i in agg){
#each loop takes 1min
colind = which(names(k.train)==paste0('ROH',i))
this.train = k.train[, c(1, colind:ncol(k.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = k.test
knn.pre[,colind] = predict(k, this.test)
}
#knn.pre = knn.pre[, 1:13]
#write_csv(knn.pre, 'knn.pre.csv')
#knn.pre <- read.csv("~/knn.pre.csv")
knn.err = materr(knn.pre) %>% t() %>%
as.data.frame()
knn.err = knn.err[1:13,]
@
<<wknn, echo=FALSE, message=FALSE, warning=FALSE>>=
wknn.pre = k.test
wknn.pre[, 2:ncol(wknn.pre)] = NA
opk2 = rep(NA, ncol(test))
for (i in agg){
# 2s per loop
colind=which(names(k.train)==paste0('ROH',i))
this.train = k.train[,c(1,colind:ncol(k.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
wk = train.kknn(ROH0~., data = this.train, kmax = 20,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[i-1] = wk$best.parameters[[2]]
this.test = k.test
#  kknn <- kknn(ROH0~., k=opk2[i-1], scale = ROH0, distance=2,
#               train = this.train, test = this.test,
#               kernel = paste0(toString(wk$best.parameters[[1]])))
wknn.pre[, colind] = predict(wk, this.test)
}
wknn.pre = wknn.pre[,1:13]
wknn.err = materr(wknn.pre)%>% t() %>%
as.data.frame()
@
<<dtree, echo=FALSE, message=FALSE, warning=FALSE>>=
dtree.pred = test
dtree.pred[,3:ncol(dtree.pred)] = NA
for (i in agg){
colind=which(names(train)==paste0('ROH',i))
this.train = train[, c(1, colind:ncol(train))]
tree.model = rpart(ROH0~., data=this.train, method='anova')
this.test = test
dtree.pred[, colind] = predict(tree.model, this.test)
}
dtree.err = materr(dtree.pred[,-2]) %>% t() %>%
as.data.frame()
@
rf.pred <- read.csv("rfpred_wd_0515.csv")
rf.err = materr(rf.pred[,-2])%>% t() %>%
as.data.frame()
set.seed(0)
svm.pred = test
svm.pred[,3:ncol(svm.pred)] = NA
totot = rep(0, 90)
for (i in agg){
colind=which(names(train)==paste0('ROH',i))
this.train = train[, c(1, 2, colind:ncol(train))]
svm.model = svm(ROH0~., this.train)
totot[i]=svm.model$tot.nSV
# this.test = test
svm.pred[, colind] = predict(svm.model, test)
}
svm.err = materr(svm.pred[,-2]) %>% t() %>%
as.data.frame()
colMeans(svm.err)
svm.err
svm.pred
test
wide = dcast(dt, Arrival.Date ~ Booking.Window, value.var='Quan') %>%
data.frame() %>%
arrange(., Arrival.Date)
wide
<<loaddata, echo=FALSE, message=FALSE, warning=FALSE>>=
arr <- read.csv("~/Documents/Research/Thesis writing/NewData/Arr.csv") %>%
data.frame()%>%
select(Arrival.Date, Booking.Window, Quantity) %>%
mutate_at(., vars(Arrival.Date),  funs(as.Date(., "%m/%d/%Y")))
dt = arr %>%
group_by(Arrival.Date, Booking.Window) %>%
mutate(Quan = sum(Quantity)) %>%
dplyr::arrange(., Arrival.Date, Booking.Window)
dt = dt[-(1:2),-3] #throw out the first two observations to avoid inconsistency
foo = function(x){
require(dplyr)
new = as.Date(x, '%y.%m.%d') %>%
format(., '20%y-%m-%d') %>%
as.Date()
return (new)
}
dt$Arrival.Date = foo(dt$Arrival.Date)
agg = c(1, 2, 3, 4, 5, 6, 7, 14, 21, 30, 60, 90)
wide = dcast(dt, Arrival.Date ~ Booking.Window, value.var='Quan') %>%
data.frame() %>%
arrange(., Arrival.Date)
for (i in (ncol(wide)-1):2){
wide[i] = wide[i] + wide[i+1]
}
wide = wide %>%
mutate(DOW = weekdays(Arrival.Date)) %>%
remove_rownames %>% column_to_rownames('Arrival.Date') %>%
select(X0, DOW, paste0("X",agg))
colnames(wide) = c('ROH0', 'DOW', paste0('ROH',agg))
wide$DOW <- ordered(wide$DOW, levels=c("Sunday","Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
kable(wide[1:10, 1:10], 'latex', caption = 'Experiment 1: Data Overview',
longtable = F, booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position", "scale_down" ,"repeat_header"))
ggplot(wide, aes(x=as.Date(unlist(rownames(wide))), y=ROH0)) +
geom_line() +
theme_minimal()+
xlab("Stay Date") + ylab('Final Arrivals') +
theme(plot.caption = element_text(hjust = 0))
@
<<e2.cv, echo=FALSE, message=FALSE, warning=FALSE>>=
materr = function(data){
require(dplyr)
m = data
for (j in 2:ncol(data)){
m[,j] = (data[,j] - data[,1]) #calculating errors for each forecast
}
ME = colMeans(m)
MAE = colMeans(abs(m))
SD = apply(m,2,sd)
p = data
for (i in 2:ncol(p)){
p[, i] = m[,i] / data[,1]
}
MPE = colMeans(p)
MAPE = colMeans(abs(p))
return(rbind(ME,MAE,MPE,MAPE,SD))
}
set.seed(0)
tr_ind = sample(nrow(wide), 0.8*nrow(wide))
train = wide[tr_ind, ]
test = wide[-tr_ind, ]
@
<<apk, echo=FALSE, message=FALSE, warning=FALSE>>=
apk.wd = train
for (j in ncol(apk.wd):3){
apk.wd[,j] = apk.wd[,1] - apk.wd[,j]
}
apk.wd = apk.wd %>%
group_by(DOW) %>%
summarise_at(.vars=names(.)[3:ncol(apk.wd)], .funs='mean')
apk.wd.pre = test
apk.wd.pre[, 3:ncol(apk.wd.pre)] = NA
for (i in 1:(nrow(apk.wd.pre))){
m = match(apk.wd.pre[i,2], apk.wd$DOW)
apk.wd.pre[i,3:ncol(apk.wd.pre)] =
test[i,3:ncol(apk.wd.pre)] + apk.wd[m, 2:ncol(apk.wd)]
}
apk.wd.err = t(materr(apk.wd.pre[,-2])) %>% data.frame()
@
<<mpk, echo=FALSE, message=FALSE, warning=FALSE>>=
mpk.wd = train
for (j in ncol(mpk.wd):3){
mpk.wd[,j] =  mpk.wd[,j]  / mpk.wd[,1]
}
mpk.wd = mpk.wd %>%
group_by(DOW) %>%
summarise_at(.vars=names(.)[3:(ncol(train))], .funs='mean')
mpk.wd.pre = test
mpk.wd.pre[, 3:ncol(mpk.wd.pre)] = NA
for (i in 1:(nrow(mpk.wd.pre))){
m = match(mpk.wd.pre[i,2], mpk.wd$DOW)
mpk.wd.pre[i, 3:ncol(mpk.wd.pre)] =
test[i, 3:ncol(mpk.wd.pre)]/
mpk.wd[m, 2:ncol(mpk.wd)]}
#NA because the dinominator=0
mpk.wd.err = materr(mpk.wd.pre[,-2]) %>% t() %>%
as.data.frame()
@
<<reg, echo=FALSE, message=FALSE, warning=FALSE>>=
reg.pred = test
reg.pred[,3:ncol(reg.pred)] = NA
reg = vector(mode='list')
s1 = Sys.time()
for (i in agg){
this.predictor = paste0(paste0('ROH',agg[which(agg==i)]), collapse='+')
lm.formula = paste('ROH0', paste0('DOW+', this.predictor), sep = '~')
reg[[this.predictor]] = lm(lm.formula, data = train)
reg.pred[, which(names(reg.pred)==paste0('ROH',i))]=predict(reg[[this.predictor]], test)
}
time.reg = Sys.time() - s1
reg.err = t(materr(reg.pred[,-2])) %>% data.frame()
@
nn.err = read_csv('nn.err.csv')
<<knn, echo=FALSE, message=FALSE, warning=FALSE>>=
#12:08 ready to run - 1:19 start to run - FINISHED!
set.seed(0)
train.true = train[,1]
dow.tr = dummy(train$DOW, sep='.')
dow.te = dummy(test$DOW, sep='.')
k.train = cbind(train[, -c(2, nearZeroVar(train))], dow.tr)
k.test = cbind(test, dow.te)[,-2]
knn.pre = k.test
knn.pre[,2:ncol(knn.pre)]=NA
opk= test[1,]
for (i in agg){
#each loop takes 1min
colind = which(names(k.train)==paste0('ROH',i))
this.train = k.train[, c(1, colind:ncol(k.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
k = train(ROH0~., method='knn', tuneLength = 5,
trControl=train.control, preProcess=c('scale','center','pca'),
data=this.train)
opk[, colind] = k$bestTune[[1]]
this.test = k.test
knn.pre[,colind] = predict(k, this.test)
}
#knn.pre = knn.pre[, 1:13]
#write_csv(knn.pre, 'knn.pre.csv')
#knn.pre <- read.csv("~/knn.pre.csv")
knn.err = materr(knn.pre) %>% t() %>%
as.data.frame()
knn.err = knn.err[1:13,]
@
<<wknn, echo=FALSE, message=FALSE, warning=FALSE>>=
wknn.pre = k.test
wknn.pre[, 2:ncol(wknn.pre)] = NA
opk2 = rep(NA, ncol(test))
for (i in agg){
# 2s per loop
colind=which(names(k.train)==paste0('ROH',i))
this.train = k.train[,c(1,colind:ncol(k.train))]
train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
wk = train.kknn(ROH0~., data = this.train, kmax = 20,
kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
opk2[i-1] = wk$best.parameters[[2]]
this.test = k.test
#  kknn <- kknn(ROH0~., k=opk2[i-1], scale = ROH0, distance=2,
#               train = this.train, test = this.test,
#               kernel = paste0(toString(wk$best.parameters[[1]])))
wknn.pre[, colind] = predict(wk, this.test)
}
wknn.pre = wknn.pre[,1:13]
wknn.err = materr(wknn.pre)%>% t() %>%
as.data.frame()
@
<<dtree, echo=FALSE, message=FALSE, warning=FALSE>>=
dtree.pred = test
dtree.pred[,3:ncol(dtree.pred)] = NA
for (i in agg){
colind=which(names(train)==paste0('ROH',i))
this.train = train[, c(1, colind:ncol(train))]
tree.model = rpart(ROH0~., data=this.train, method='anova')
this.test = test
dtree.pred[, colind] = predict(tree.model, this.test)
}
dtree.err = materr(dtree.pred[,-2]) %>% t() %>%
as.data.frame()
@
rf.pred <- read.csv("rfpred_wd_0515.csv")
rf.err = materr(rf.pred[,-2])%>% t() %>%
as.data.frame()
test
<<svm, echo=FALSE, message=FALSE, warning=FALSE>>=
set.seed(0)
svm.pred = test
svm.pred[,3:ncol(svm.pred)] = NA
totot = rep(0, 90)
for (i in agg){
colind=which(names(train)==paste0('ROH',i))
this.train = train[, c(1, 2, colind:ncol(train))]
svm.model = svm(ROH0~., this.train)
totot[i]=svm.model$tot.nSV
# this.test = test
svm.pred[, colind] = predict(svm.model, test)
}
svm.err = materr(svm.pred[,-2]) %>% t() %>%
as.data.frame()
colMeans(svm.err)
@
e2_MAE_ALL = cbind(apk = apk.wd.err[-1,2], mpk=mpk.wd.err[-1,2],
reg = reg.err[-1,2],  nn = nn.err[-1,2], knn = knn.err[-1,2],
wknn = wknn.err[-1,2], dtree = dtree.err[-1,2],
rf = rf.err[-1,2], svm = svm.err[-1,2]) %>%
as.data.frame()
rownames(e2_MAE_ALL)=rownames(apk.wd.err)[-1]
e2MAEmelt = melt(as.matrix(e2_MAE_ALL), varnames=c('DBA', 'Model'))
e2_MAE_ALL[13,] = colMeans(e2_MAE_ALL)
e2_MAE_ALL
