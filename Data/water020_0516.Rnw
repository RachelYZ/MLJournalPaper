\documentclass[master,tocprelim]{cornell}
\usepackage{booktabs}         % reqired for booktabs=T
\usepackage[backend= biber]{biblatex}
\usepackage[table]{xcolor}    % required for "striped"
\addbibresource{LR.bib}

\usepackage{graphicx,pstricks}
\usepackage{graphics}
\usepackage{moreverb}
\usepackage{subfigure}
\usepackage{epsfig}
\usepackage{hangcaption}
\usepackage{txfonts}
\usepackage{palatino}
\graphicspath{ {figures/} }
 \usepackage{booktabs}
 \usepackage{longtable}
 \usepackage{array}
 \usepackage{multirow}
 \usepackage{wrapfig}
 \usepackage{float}
 \usepackage{colortbl}
 \usepackage{pdflscape}
 \usepackage{tabu}
 \usepackage{threeparttable}
 \usepackage{threeparttablex}
 \usepackage[normalem]{ulem}
 \usepackage{makecell}
 \usepackage{xcolor}


\begin{document}

\chapter{sample}

He said it is cool\cite{tkh1998}.

<<loadpackages, echo=FALSE, message=FALSE, warning=FALSE>>=
library(kableExtra)
library(tidyverse)
library(neuralnet)
library(dplyr)
library(reshape2)
library(colorspace)
library(ggplot2)
library(texreg)
library(caret)
library(forecast)
options(digits = 3)
library(kknn)
library(e1071)
library(dummies)
library(rpart)
@

\section*{Single hotel}

<<loaddata, echo=FALSE, message=FALSE, warning=FALSE>>=
arr <- read.csv("~/Documents/Research/Thesis writing/NewData/Arr.csv") %>% 
  data.frame()%>%
  select(Arrival.Date, Booking.Window, Quantity) %>%
  mutate_at(., vars(Arrival.Date),  funs(as.Date(., "%m/%d/%Y")))
dt = arr %>%
  group_by(Arrival.Date, Booking.Window) %>%
  mutate(Quan = sum(Quantity)) %>%
  dplyr::arrange(., Arrival.Date, Booking.Window) 
dt = dt[-(1:2),-3] #throw out the first two observations to avoid inconsistency
foo = function(x){
  require(dplyr)
  new = as.Date(x, '%y.%m.%d') %>%
     format(., '20%y-%m-%d') %>%
    as.Date()
  return (new)
}
dt$Arrival.Date = foo(dt$Arrival.Date)

agg = c(1, 2, 3, 4, 5, 6, 7, 14, 21, 30, 60, 90)
wide = dcast(dt, Arrival.Date ~ Booking.Window, value.var='Quan') %>% 
  data.frame() %>%
  arrange(., Arrival.Date)

for (i in (ncol(wide)-1):2){
  wide[i] = wide[i] + wide[i+1] 
}

wide = wide %>%
  mutate(DOW = weekdays(Arrival.Date)) %>%
  remove_rownames %>% column_to_rownames('Arrival.Date') %>%
  select(X0, DOW, paste0("X",agg)) 
colnames(wide) = c('ROH0', 'DOW', paste0('ROH',agg))
wide$DOW <- ordered(wide$DOW, levels=c("Sunday","Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

kable(wide[1:10, 1:10], 'latex', caption = 'Experiment 1: Data Overview',
        longtable = F, booktabs = T) %>%
  kable_styling(latex_options = c("striped", "hold_position", "scale_down" ,"repeat_header"))

ggplot(wide, aes(x=as.Date(unlist(rownames(wide))), y=ROH0)) +  
  geom_line() +
  theme_minimal()+
  xlab("Stay Date") + ylab('Final Arrivals') + 
  theme(plot.caption = element_text(hjust = 0))
@

<<e2.cv, echo=FALSE, message=FALSE, warning=FALSE>>=
materr = function(data){ 
  require(dplyr)
  m = data 
  for (j in 2:ncol(data)){
    m[,j] = (data[,j] - data[,1]) #calculating errors for each forecast
  }
  ME = colMeans(m)
  MAE = colMeans(abs(m))
  SD = apply(m,2,sd)
  
  p = data
  for (i in 2:ncol(p)){
    p[, i] = m[,i] / data[,1]
  }
  MPE = colMeans(p)
  MAPE = colMeans(abs(p))

  return(rbind(ME,MAE,MPE,MAPE,SD))
} 

set.seed(0) 
tr_ind = sample(nrow(wide), 0.8*nrow(wide))
train = wide[tr_ind, ]
test = wide[-tr_ind, ]

@

<<apk, echo=FALSE, message=FALSE, warning=FALSE>>=  
apk.wd = train    
for (j in ncol(apk.wd):3){
  apk.wd[,j] = apk.wd[,1] - apk.wd[,j]
}

apk.wd = apk.wd %>%
  group_by(DOW) %>%
  summarise_at(.vars=names(.)[3:ncol(apk.wd)], .funs='mean')

apk.wd.pre = test
apk.wd.pre[, 3:ncol(apk.wd.pre)] = NA

for (i in 1:(nrow(apk.wd.pre))){
  m = match(apk.wd.pre[i,2], apk.wd$DOW)
  apk.wd.pre[i,3:ncol(apk.wd.pre)] = 
    test[i,3:ncol(apk.wd.pre)] + apk.wd[m, 2:ncol(apk.wd)]
}
apk.wd.err = t(materr(apk.wd.pre[,-2])) %>% data.frame() 
@

<<mpk, echo=FALSE, message=FALSE, warning=FALSE>>=  
mpk.wd = train 
for (j in ncol(mpk.wd):3){
  mpk.wd[,j] =  mpk.wd[,j]  / mpk.wd[,1]
}
mpk.wd = mpk.wd %>%
  group_by(DOW) %>%
 summarise_at(.vars=names(.)[3:(ncol(train))], .funs='mean')

mpk.wd.pre = test
mpk.wd.pre[, 3:ncol(mpk.wd.pre)] = NA

for (i in 1:(nrow(mpk.wd.pre))){
  m = match(mpk.wd.pre[i,2], mpk.wd$DOW)
  mpk.wd.pre[i, 3:ncol(mpk.wd.pre)] = 
    test[i, 3:ncol(mpk.wd.pre)]/
    mpk.wd[m, 2:ncol(mpk.wd)]} 
#NA because the dinominator=0

mpk.wd.err = materr(mpk.wd.pre[,-2]) %>% t() %>% 
  as.data.frame() 
@

<<reg, echo=FALSE, message=FALSE, warning=FALSE>>= 
reg.pred = test
reg.pred[,3:ncol(reg.pred)] = NA
reg = vector(mode='list')
s1 = Sys.time()
for (i in agg){ 
  this.predictor = paste0(paste0('ROH',agg[which(agg==i)]), collapse='+')
  lm.formula = paste('ROH0', paste0('DOW+', this.predictor), sep = '~')
  reg[[this.predictor]] = lm(lm.formula, data = train)
  reg.pred[, which(names(reg.pred)==paste0('ROH',i))]=predict(reg[[this.predictor]], test)
}
time.reg = Sys.time() - s1
reg.err = t(materr(reg.pred[,-2])) %>% data.frame() 
@

<<nn, echo=FALSE, eval=FALSE, warning=FALSE>>=  
nn.train=scale(train[,-2])
scale.list.e2 = attributes(nn.train)
nn.train.scaled=cbind(nn.train, dow.tr)

nn.test=test[,-2]
nn.test.scaled = scale(nn.test, scale = scale.list.e2$`scaled:scale`, 
                       center=scale.list.e2$`scaled:center`)
nn.test.scaled=cbind(nn.test.scaled, dow.te)

nn.pred = nn.test
nn.pred[,2:ncol(nn.pred)] = NA
s1=Sys.time()
for (i in agg){
  colind = which(names(as.data.frame(nn.train.scaled))==paste0('ROH',i))
  this.train = nn.train.scaled[, c(1, colind:ncol(data.frame(nn.train.scaled)))]
  nn.model = neuralnet(ROH0~., this.train, linear.output = F, hidden=3, stepmax = 1e+06)
  this.test = nn.test.scaled %>% as.data.frame()
  nn.pred[, colind] = predict(nn.model, this.test)
  print(Sys.time()-s1)
}
#write_csv(nn.pred, 'e2.nn.pre.csv')
#nn.pre.scaled <- read.csv("~/e2.nn.pre.csv", header=ROH0)

nn.pre.us = nn.pred*(scale.list.e2$`scaled:scale`)+
  scale.list.e2$`scaled:center`
nn.pre.us[,1] = test$ROH0
nn.err = materr(nn.pre.us) %>% t() %>% 
  as.data.frame() 
@

<<nn.results, echo=FALSE, message=FALSE, warning=FALSE>>=
nn.err = read_csv('nn.err.csv')
@

<<knn, echo=FALSE, message=FALSE, warning=FALSE>>=
#12:08 ready to run - 1:19 start to run - FINISHED!
set.seed(0) 
train.true = train[,1] 
dow.tr = dummy(train$DOW, sep='.') 
dow.te = dummy(test$DOW, sep='.')
k.train = cbind(train[, -c(2, nearZeroVar(train))], dow.tr) 
k.test = cbind(test, dow.te)[,-2]
knn.pre = k.test
knn.pre[,2:ncol(knn.pre)]=NA
opk= test[1,]

for (i in agg){
  #each loop takes 1min
  colind = which(names(k.train)==paste0('ROH',i))
  this.train = k.train[, c(1, colind:ncol(k.train))]
  train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
  k = train(ROH0~., method='knn', tuneLength = 5, 
            trControl=train.control, preProcess=c('scale','center','pca'),
            data=this.train)
  opk[, colind] = k$bestTune[[1]]
  this.test = k.test
  knn.pre[,colind] = predict(k, this.test)
}
#knn.pre = knn.pre[, 1:13]
#write_csv(knn.pre, 'knn.pre.csv')
#knn.pre <- read.csv("~/knn.pre.csv")

knn.err = materr(knn.pre) %>% t() %>% 
  as.data.frame() 
knn.err = knn.err[1:13,]
@

<<wknn, echo=FALSE, message=FALSE, warning=FALSE>>= 
wknn.pre = k.test
wknn.pre[, 2:ncol(wknn.pre)] = NA 

opk2 = rep(NA, ncol(test)) 
for (i in agg){
  # 2s per loop
  colind=which(names(k.train)==paste0('ROH',i))
  this.train = k.train[,c(1,colind:ncol(k.train))]
  train.control = trainControl(method='repeatedcv', number=10, preProcOptions = list(thresh=0.8)) #for PCA
  wk = train.kknn(ROH0~., data = this.train, kmax = 20, 
                  kernel =  c("rectangular", "triangular", "epanechnikov", "gaussian", "rank", "optimal"))
  opk2[i-1] = wk$best.parameters[[2]]
  
  this.test = k.test
#  kknn <- kknn(ROH0~., k=opk2[i-1], scale = ROH0, distance=2, 
#               train = this.train, test = this.test,
#               kernel = paste0(toString(wk$best.parameters[[1]])))
  wknn.pre[, colind] = predict(wk, this.test)
}
wknn.pre = wknn.pre[,1:13]
wknn.err = materr(wknn.pre)%>% t() %>% 
  as.data.frame() 
@

<<dtree, echo=FALSE, message=FALSE, warning=FALSE>>= 
dtree.pred = test
dtree.pred[,3:ncol(dtree.pred)] = NA

for (i in agg){ 
  colind=which(names(train)==paste0('ROH',i))
  this.train = train[, c(1, colind:ncol(train))]
  tree.model = rpart(ROH0~., data=this.train, method='anova')
  this.test = test
  dtree.pred[, colind] = predict(tree.model, this.test)
}

dtree.err = materr(dtree.pred[,-2]) %>% t() %>% 
  as.data.frame() 
@

<<rtree, echo=FALSE, eval=FALSE, warning=FALSE>>= 
set.seed(0)  
rf.pred = test
rf.pred[,3:ncol(test)] = NA
s1 = Sys.time()
for (i in agg){
  colind=which(names(train)==paste0('ROH',i))
  this.train = train[,c(1,2,colind:ncol(train))]
  this.test = test
  train.control=trainControl(method='repeatedcv', number=10)
#  rtt = randomForest(ROH0~., data = this.train)
  r.tree = train(ROH0~., data = this.train, method='rf',
                 trControl=train.control, tuneLength = 12)
                 #,tunegrid=expand.grid(.mtry=sqrt(ncol(this.train))))
  print(Sys.time()-s1)
  #print(r.tree)
  rf.pred[, colind] = predict(r.tree, this.test, type = 'raw')
}
#importance(rtt)
#varImpPlot(rtt)
#varImp(r.tree)
@ 

<<rfresults, echo=FALSE>>=
rf.pred <- read.csv("rfpred_wd_0515.csv")
rf.err = materr(rf.pred[,-2])%>% t() %>% 
  as.data.frame() 
@

<<svm, echo=FALSE, message=FALSE, warning=FALSE>>= 
set.seed(0)
svm.pred = test   
svm.pred[,3:ncol(svm.pred)] = NA
totot = rep(0, 90)
for (i in agg){
  colind=which(names(train)==paste0('ROH',i))
  this.train = train[, c(1, 2, colind:ncol(train))]
  svm.model = svm(ROH0~., this.train)
  totot[i]=svm.model$tot.nSV
 # this.test = test
  svm.pred[, colind] = predict(svm.model, test)
}

svm.err = materr(svm.pred[,-2]) %>% t() %>% 
  as.data.frame()
colMeans(svm.err)
@

<<results.plot, echo=FALSE, message=FALSE, warning=FALSE>>=
e2_SDE_ALL = cbind(apk = apk.wd.err[-1,5], mpk=mpk.wd.err[-1,5],
              reg = reg.err[-1,5],  nn = nn.err[-1,5],knn = knn.err[-1,5], 
              wknn = wknn.err[-1,5], dtree = dtree.err[-1,5],  
              rf = rf.err[-1,5], svm = svm.err[-1,5] ) %>%
  as.data.frame() 
rownames(e2_SDE_ALL)=rownames(apk.wd.err)[-1]
e2SDEmelt = melt(as.matrix(e2_SDE_ALL), varnames=c('DBA', 'Model'))
e2SDEmelt$DBA = factor(e2SDEmelt$DBA, 
              levels = c('ROH1','ROH2','ROH3','ROH4','ROH5','ROH6','ROH7','ROH14',
                         'ROH21','ROH30','ROH60','ROH90'))
e2SDEmelt$Model = factor(e2SDEmelt$Model, levels=c('apk','mpk','reg','nn','knn','wknn', 'dtree', 'rf','svm'))
ggplot(e2SDEmelt, 
       aes(x=DBA, y=value, group=Model)) +
  geom_line(aes(color=Model,linetype=Model), size=0.5)+
  geom_point(aes(color=Model, shape=Model), size=1.8)+
  scale_linetype_manual('', values=c('solid', 'solid', 'dotted',
                                     'dotted', 'dotted', 'dotted',
                                     'solid', 'solid', 'solid'))+
  scale_shape_manual('', values=c(0,1,5,4,0,1,2,5,4)) + 
  scale_color_manual('', values = c('#999999', '#999999', #pickup- red
                                '#000000', '#000000', #reg+nn: blue
                                '#999999', '#999999', #KNN: yellow
                                '#000000','#000000', #Tree: green
                                '#000000')) + #SVM: 
  xlab('DBA') + ylab('Standard Deviation of Errors') +
  theme_minimal()+
  theme(axis.text.x = element_text(angle=45, vjust=0.5))


e2_SDE_ALL[13,] = colMeans(e2_SDE_ALL)
kable(e2_SDE_ALL[13,], 'latex', caption = 'Experiment2: Data Overview',
      booktabs = T) %>%
  kable_styling(latex_options = c("striped", "repeat_header"))
#write.csv(cbind(MEALL, MAEALL, MPEALL, MAPEALL, SD), "ran_e1_bycutoff.csv")

e2_ME_ALL = cbind(apk = apk.wd.err[-1,1], mpk=mpk.wd.err[-1,1],
              reg = reg.err[-1,1], nn = nn.err[-1,1], knn = knn.err[-1,1], 
              wknn = wknn.err[-1,1], dtree = dtree.err[-1,1],  
              rf = rf.err[-1,1], svm = svm.err[-1,1]) %>%
  as.data.frame() 
rownames(e2_ME_ALL)=rownames(apk.wd.err)[-1]
e2MEmelt = melt(as.matrix(e2_ME_ALL), varnames=c('DBA', 'Model'))
e2MEmelt$DBA = factor(e2MEmelt$DBA, 
              levels = c('ROH1','ROH2','ROH3','ROH4','ROH5','ROH6','ROH7','ROH14',
                         'ROH21','ROH30','ROH60','ROH90'))
e2MEmelt$Model = factor(e2MEmelt$Model, levels=c('apk','mpk','reg','nn','knn','wknn', 'dtree', 'rf','svm'))
ggplot(e2MEmelt, 
       aes(x=DBA, y=value, group=Model, color=Model)) +
  geom_line(aes(color=Model,linetype=Model), size=0.5)+
  geom_point(aes(color=Model, shape=Model), size=1.8)+
  scale_linetype_manual('', values=c('solid', 'solid', 'dotted',
                                     'dotted', 'dotted', 'dotted',
                                     'solid', 'solid', 'solid'))+
  scale_shape_manual('', values=c(0,1,5,4,0,1,2,5,4)) + 
  scale_color_manual('', values = c('#999999', '#999999', #pickup- red
                                '#000000', '#000000', #reg+nn: blue
                                '#999999', '#999999', #KNN: yellow
                                '#000000','#000000', #Tree: green
                                '#000000')) + #SVM: 
  xlab('DBA') + ylab('Mean Errors') +
  theme_minimal()+
  theme(axis.text.x = element_text(angle=45, vjust=0.5))
e2_ME_ALL[13,] = colMeans(e2_ME_ALL)
kable(e2_ME_ALL[13,], 'latex', caption = 'Experiment2: Data Overview',
      booktabs = T) %>%
  kable_styling(latex_options = c("striped", "repeat_header"))


e2_MAE_ALL = cbind(apk = apk.wd.err[-1,2], mpk=mpk.wd.err[-1,2],
              reg = reg.err[-1,2],  nn = nn.err[-1,2], knn = knn.err[-1,2], 
              wknn = wknn.err[-1,2], dtree = dtree.err[-1,2],  
              rf = rf.err[-1,2], svm = svm.err[-1,2]) %>%
  as.data.frame() 
rownames(e2_MAE_ALL)=rownames(apk.wd.err)[-1]
e2MAEmelt = melt(as.matrix(e2_MAE_ALL), varnames=c('DBA', 'Model'))
e2MAEmelt$DBA = factor(e2MAEmelt$DBA, 
              levels = c('ROH1','ROH2','ROH3','ROH4','ROH5','ROH6','ROH7','ROH14',
                         'ROH21','ROH30','ROH60','ROH90'))
e2MAEmelt$Model = factor(e2MAEmelt$Model, levels=c('apk','mpk','reg','nn','knn','wknn', 'dtree', 'rf','svm'))
ggplot(e2MAEmelt, 
       aes(x=DBA, y=value, group=Model, color=Model)) +
  geom_line(aes(color=Model,linetype=Model), size=0.5)+
  geom_point(aes(color=Model, shape=Model), size=2)+
  scale_linetype_manual('', values=c('solid', 'solid', 'dotted',
                                     'dotted', 'dotted', 'dotted',
                                     'solid', 'solid', 'solid'))+
  scale_shape_manual('', values=c(0,1,5,4,0,1,2,5,4)) + 
  scale_color_manual('', values = c('#999999', '#999999', #pickup- red
                                '#000000', '#000000', #reg+nn: blue
                                '#999999', '#999999', #KNN: yellow
                                '#000000','#000000', #Tree: green
                                '#000000')) + #SVM: 
  xlab('DBA') + ylab('Mean Absolute Errors') +
  theme_minimal()+
  theme(axis.text.x = element_text(angle=45, vjust=0.5))
e2_MAE_ALL[13,] = colMeans(e2_MAE_ALL)
kable(e2_MAE_ALL[13,], 'latex', caption = 'Experiment2: Data Overview',
      booktabs = T) %>%
  kable_styling(latex_options = c("striped", "repeat_header"))
@


\appendix

<<biber, eval= TRUE, include= FALSE, cache= FALSE, echo= FALSE>>=
system (paste ("biber", sub ("\\.Rnw$", "", current_input())))
@

\printbibliography

\end{document}